/**
 * Authors: Anupama Hazarika, Anisha Munjal
 * Course: CSC 372
 *
 * This creates the application GUI for the Game
 */

import javafx.application.Application
import javafx.scene.Scene
import javafx.scene.control.Button
import javafx.scene.control.ToggleButton
import javafx.scene.layout.GridPane
import javafx.scene.text.Text
import javafx.stage.Stage
import java.util.*
import java.util.TimerTask
import java.util.concurrent.TimeUnit


class MinesweeperGUI : Application() {
    private var rows = 4
    private var columns = 4
    private val mines = 10
    private var grid = MinesweeperGrid(rows, columns, mines)
    private var gameOver = false
    private var isFlaggingMode = false
    private var min = 1L
    private var sec = 60L
    private var totalsec = 120L
    private var timerDisplay = Text()
    private val timer = Timer("Timer", true)

    /**
     * start method is overridden from Application class to start the game.
     * It creats the initial selection window for user to make a choice
     * of difficulty level they want to play.
     *
     * If user selects "Easy", the grid size is set to 4x4 and user is given 6 minutes to play.
     * If user select "Medium", the grid size is set to 8x8 and user is given 4 minutes to play.
     * If user select "Hard", the grid size is set to 12x12 and user is given 2 minutes to play.
     *
     * @param primaryStage the Stage object used to create the game
     *
     */
    override fun start(primaryStage: Stage) {
        val gridPane = GridPane()

        val easyButton = Button("Easy")
        easyButton.setOnAction {
            rows = 4
            columns = 4
            totalsec = 6 * 60
            startGame(primaryStage)
        }
        easyButton.style = "-fx-font: 20px Tahoma; -fx-background-color: lightgray; -fx-border-color: gray; -fx-text-fill: black;"

        val midButton = Button("Medium")
        midButton.setOnAction {
            rows = 8
            columns =8
            totalsec = 4 * 60
            startGame(primaryStage)
        }
        midButton.style = "-fx-font: 20px Tahoma; -fx-background-color: lightgray; -fx-border-color: gray; -fx-text-fill: black;"

        val hardButton = Button("Hard")
        hardButton.setOnAction {
            rows = 12
            columns = 12
            totalsec = 2 * 60
            startGame(primaryStage)
        }
        hardButton.style = "-fx-font: 20px Tahoma; -fx-background-color: lightgray; -fx-border-color: gray; -fx-text-fill: black;"

        var scene = Scene(gridPane)
        primaryStage.title = "Minesweeper - pick difficulty level"
        primaryStage.scene = scene

        val choicesPane = GridPane()

        val label = Text()
        label.text = "    Select Difficulty Level:   "
        label.style = "-fx-font: 20px Tahoma; -fx-background-color: lightgray; -fx-border-color: gray; -fx-text-fill: black;"
        choicesPane.add(label, 0, 0)

        choicesPane.add(easyButton,1, 0)
        choicesPane.add(midButton,2, 0)
        choicesPane.add(hardButton,3, 0)

        primaryStage.scene = Scene(choicesPane)

        primaryStage.show()
    }

    /**
     * This method is called to start the game after user has picked their difficulty level
     * It draws the game grid based on difficulty selection made by user
     *
     * @param primaryStage the Stage class to use to display the game GUI
     */
    private fun startGame(primaryStage: Stage) {
        startTimer(primaryStage)
        val gridPane = GridPane()
        grid = MinesweeperGrid(rows, columns, mines)
        // Create a toggle switch for flagging mode
        val flagToggle = ToggleButton("Reveal Mode")
        flagToggle.selectedProperty().addListener { _, _, newValue ->
            isFlaggingMode = newValue
            if (isFlaggingMode) {
                flagToggle.text = "Flag Mode"
            } else {
                flagToggle.text = "Reveal Mode"
            }
        }

        flagToggle.style = "-fx-background-color: lightgray; -fx-border-color: gray; -fx-text-fill: black;"

        for (row in 0 until rows) {
            for (col in 0 until columns) {
                val button = Button()
                button.style = "-fx-background-color: linear-gradient(to bottom, #81BEF7, #81D8D0); -fx-text-fill: white; -fx-border-color: #6699CC;"
                button.prefWidth = 40.0
                button.prefHeight = 40.0
                gridPane.add(button, col, row)

                button.setOnAction {
                    if (!gameOver) {
                        val rowClicked = GridPane.getRowIndex(button)
                        val colClicked = GridPane.getColumnIndex(button)

                        if (isFlaggingMode) {
                            grid.flag(rowClicked, colClicked)
                            updateAllCellsAppearance(gridPane)
                        } else {
                            if (grid.reveal(rowClicked, colClicked)) {
                                gameOver = true
                                showGameOverMessage(primaryStage, "You Lose", rowClicked, colClicked)
                            } else {
                                updateAllCellsAppearance(gridPane)
                            }
                        }
                    }
                }
            }
        }

        val scene = Scene(gridPane)
        primaryStage.title = "Minesweeper"
        primaryStage.scene = scene

        // Add the flagging mode toggle switch
        val togglePane = GridPane()
        val topPane = GridPane()
        timerDisplay.style = "-fx-font: 20px Tahoma; -fx-background-color: lightgray; -fx-border-color: gray; -fx-text-fill: black;"
        topPane.add(flagToggle, 0, 0)
        topPane.add(timerDisplay, 1, 0)
        togglePane.add(topPane, 0,0)
        togglePane.add(gridPane, 0, 1)

        primaryStage.scene = Scene(togglePane)

        primaryStage.show()
    }

    /**
     * Converts the total remaining seconds left for user to continue playing to minutes:second format.
     * The remaining time is updated and displayed on the timer display text on the game window.
     */
    private fun convertTime () {
        min = TimeUnit.SECONDS.toMinutes(totalsec)
        sec = totalsec - (min * 60)
        timerDisplay.text = "".plus(min).plus(":").plus(sec)
        totalsec--
    }

    /**
     * Starts a count down timer task that runs every one second.
     *
     * @param primaryStage the Stage class to use to display the game GUI
     */
    private fun startTimer (primaryStage: Stage) {
        val task = object:TimerTask() {
            override fun run() {
                convertTime()
                if (totalsec < 0) {
                    showGameOverMessage(primaryStage, "Time up!", 0, 0)
                }
            }
        }
        timer.schedule(task, 0, 1000)
    }

    /**
     * Shows the message to the user once game is over
     *
     * @param primaryStage The Stage class to use to display the game GUI
     * @param message The message to display
     * @param rowClicked The row number clicked by user
     * @param colClicked The column number clicked by user
     */
    private fun showGameOverMessage(primaryStage: Stage, message: String, rowClicked: Int, colClicked: Int) {
        // First, reveal the mine
        grid.reveal(rowClicked, colClicked)

        //cancel the timer when game is over
        timer.cancel()

        // Then, show the game over message with a white background
        val gameOverText = Text(message)
        gameOverText.setStyle("-fx-font-size: 24")
        val gridPane = GridPane()
        gridPane.add(gameOverText, 0, 0)
        GridPane.setConstraints(gameOverText, 0, 0, 1, 1)
        gridPane.layoutX = 120.0
        gridPane.layoutY = 120.0
        gridPane.style = "-fx-background-color: white;" // Set background to white
        primaryStage.scene.root = gridPane
    }

    /**
     * Draws and displays the game grid
     *
     * @param gridPane The GridPane class to place GUI components
     * @param primaryStage The Stage class to use to display the game GUI
     */
    private fun showGameGrid(gridPane: GridPane, primaryStage: Stage) {

        for (row in 0 until rows) {
            for (col in 0 until columns) {
                val button = Button()
                button.style = "-fx-background-color: linear-gradient(to bottom, #81BEF7, #81D8D0); -fx-text-fill: white; -fx-border-color: #6699CC;"
                button.prefWidth = 40.0
                button.prefHeight = 40.0
                gridPane.add(button, col, row)

                button.setOnAction {
                    if (!gameOver) {
                        val rowClicked = GridPane.getRowIndex(button)
                        val colClicked = GridPane.getColumnIndex(button)

                        if (isFlaggingMode) {
                            grid.flag(rowClicked, colClicked)
                            updateAllCellsAppearance(gridPane)
                        } else {
                            if (grid.reveal(rowClicked, colClicked)) {
                                gameOver = true
                                showGameOverMessage(primaryStage, "You Lose", rowClicked, colClicked)
                            } else {
                                updateAllCellsAppearance(gridPane)
                            }
                        }
                    }
                }
            }
        }
    }
    /*private fun updateButtonAppearance(button: Button, cell: Cell) {
        if (cell.isRevealed) {
            if (cell.isMine) {
                button.text = "*"
            } else if (cell.number > 0) {
                button.text = cell.number.toString()
            } else {
                button.text = ""
            }
        } else if (cell.isFlagged) {
            button.text = "F"
        } else {
            button.text = ""
        }
    }*/

    /**
     * Updates the cell appearance of all the cells based on which cell gets clicked by user.
     *
     * @param gridPane The GridPane class to place GUI components
     */
    private fun updateAllCellsAppearance(gridPane: GridPane) {
        for (node in gridPane.children) {
            if (node is Button) {
                val row = GridPane.getRowIndex(node)
                val col = GridPane.getColumnIndex(node)
                val cell = grid.getCell(row, col)
                if (cell.isRevealed) {
                    node.isDisable = true
                    node.style = "-fx-background-color: lightgray;"
                    if (cell.isMine) {
                        node.text = "*"
                    } else if (cell.number > 0) {
                        node.text = cell.number.toString()
                    } else {
                        node.text = ""
                    }
                } else if (cell.isFlagged) {
                    node.text = "F"
                } else {
                    node.text = ""
                }
            }
        }
    }

    fun main() {
        launch(MinesweeperGUI::class.java)
    }
}

fun main() {
    MinesweeperGUI().main()
}
